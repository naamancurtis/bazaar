type QueryRoot {
	healthCheck: Boolean!
	customers: [Customer!]!
	customer: Customer!
	cart: ShoppingCart!
}
"""
Graphql Resolver
"""
type Customer {
	id: UUID!
	email: String!
	firstName: String!
	lastName: String!
	createdAt: DateTime!
	lastModified: DateTime!
	cart: ShoppingCart!
}
scalar UUID
"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime
type ShoppingCart {
	id: UUID!
	cartType: CartType!
	discounts: [UUID!]
	priceBeforeDiscounts: Float!
	priceAfterDiscounts: Float!
	currency: Currency!
	createdAt: DateTime!
	lastModified: DateTime!
	items: [CartItem!]!
}
enum CartType {
	ANONYMOUS
	KNOWN
}
enum Currency {
	GBP
	USD
}
type CartItem {
	sku: String!
	quantity: Int!
	pricePerUnit: Float!
	name: String!
	description: String!
	imgSrc: String!
	tags: [String!]!
}
type MutationRoot {
	login(email: String!, password: String!): BazaarTokens!
	anonymousLogin: BazaarTokens!
	refresh: BazaarTokens!
	signUp(email: String!, password: String!, firstName: String!, lastName: String!): BazaarTokens!
	updateCustomer(update: [CustomerUpdate!]!): Customer!
	addItemsToCart(newItems: [UpdateCartItem!]!): ShoppingCart!
	removeItemsFromCart(removedItems: [UpdateCartItem!]!): ShoppingCart!
}
type BazaarTokens {
	issuedAt: Int!
	accessTokenExpiresIn: Int!
	refreshTokenExpiresIn: Int!
	tokenType: String!
}
input CustomerUpdate {
key: String!
value: String!
}
input UpdateCartItem {
sku: String!
quantity: Int!
}
schema {
	query: QueryRoot
	mutation: MutationRoot
}
